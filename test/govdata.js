// Generated by CoffeeScript 1.9.3
(function() {
  var dataset, errorHelper, errorMessage, govdata;

  if (typeof process === 'object') {
    govdata = require('../src/govdata');
    dataset = require('./dataset');
  } else {
    govdata = window.GovData;
    dataset = window.dataset;
  }

  errorHelper = function(error) {
    throw new Error('Error: ' + error.getMessage());
  };

  errorMessage = function(message) {
    throw new Error('Error: ' + message);
  };

  describe('GovData Integration', function() {
    describe('Queries: Generic', function() {
      describe('Not found', function() {
        it('Returns an error', function(done) {
          this.timeout(5000);
          return govdata.findByICO('123', function(entity) {
            return errorMessage('Found');
          }, function(error) {
            if (error.getCode() === 110) {
              return done();
            } else {
              return errorHelper(error);
            }
          });
        });
      });
      return describe('Found', function() {
        it('Returns an entity', function(done) {
          this.timeout(5000);
          return govdata.findByICO('00006947', function(entity) {
            return done();
          }, function(error) {
            return errorHelper(error);
          });
        });
      });
    });
  });

  describe('GovData Unit', function() {
    describe('Errors', function() {
      it('Have integer codes', function() {
        var code, errors, k, v;
        errors = govdata.createError;
        for (k in errors) {
          v = errors[k];
          code = v().getCode();
          if (typeof code !== 'integer' || code - error !== 0) {
            return false;
          }
        }
        return true;
      });
      return it('Have messages and act as strings', function() {
        var error, errors, k, message, v;
        errors = govdata.createError;
        for (k in errors) {
          v = errors[k];
          error = v();
          message = error.getMessage();
          if (typeof message !== 'string' || message !== error.toString()) {
            return false;
          }
        }
        return true;
      });
    });
    describe('Mocked: Entity', function() {
      var entity;
      entity = govdata.createEntity(dataset.entityStandard());
      it('Has ICO', function() {
        var s;
        s = entity.getICO();
        return typeof s === 'string' && s.length > 0;
      });
      it('Has a name', function() {
        var s;
        s = entity.getName();
        return typeof s === 'string' && s.length > 0;
      });
      it('Has a valid foundation date', function() {
        var foundedAt;
        foundedAt = entity.getFoundedAt();
        return typeof foundedAt === 'object' && foundedAt.getTime() > 0;
      });
      return it('Acts as a string', function() {
        return typeof entity.toString() === 'string';
      });
    });
    describe('Mocked: VAT', function() {
      var standard;
      standard = govdata.createEntity(dataset.entityStandard());
      it('Has a valid update date', function() {
        var updatedAt;
        updatedAt = standard.getVAT().getUpdatedAt();
        return typeof updatedAt === 'object' && updatedAt.getTime() > 0;
      });
      it('Has DIC', function() {
        var s;
        s = standard.getVAT().getDIC();
        return typeof s === 'string' && s.length > 0;
      });
      it('Has accounts', function() {
        var s;
        s = standard.getVAT().getAccounts();
        return Array.isArray(s) && s.length > 0;
      });
      it('Returns accounts', function() {
        return standard.getVAT().hasAccounts();
      });
      it('Returns unreliability', function() {
        return standard.getVAT().isUnreliable() === false;
      });
      it('Acts as a string', function() {
        return typeof standard.getVAT().toString() === 'string';
      });
      describe('Registered entity', function() {
        it('Has information', function() {
          return standard.hasVAT();
        });
        it('Throws an error on missing information', function(done) {
          var e, entity;
          entity = govdata.createEntity(dataset.entityMissingVAT());
          if (entity.hasVAT()) {
            try {
              entity.getVAT();
            } catch (_error) {
              e = _error;
              if (e - govdata.createError.dataUnavailable() === 0) {
                done();
              } else {
                errorHelper(e);
              }
            }
          } else {
            errorMessage('Doesn\'t have VAT information available');
          }
        });
        return it('Reports no accounts', function() {
          var entity;
          entity = govdata.createEntity(dataset.entityNoAccounts());
          return entity.hasVAT() && entity.getVAT().hasAccounts() === false;
        });
      });
      return describe('Mocked: Account', function() {
        var accounts, intl, local;
        standard = govdata.createEntity(dataset.entityStandard());
        accounts = standard.getVAT().getAccounts();
        intl = accounts[0];
        local = accounts[1];
        it('Has a valid published date', function() {
          var at;
          at = local.getPublishedAt();
          return typeof at === 'object' && at.getTime() > 0;
        });
        it('Returns a number', function() {
          var s;
          s = local.getNumber();
          return typeof s === 'string' && s.length > 0;
        });
        it('Returns locality', function() {
          return local.isLocal() && !local.isIntl();
        });
        it('Returns internationality', function() {
          return !intl.isLocal() && intl.isIntl();
        });
        it('Returns prefix presence', function() {
          return local.hasPrefix() && !intl.hasPrefix();
        });
        it('Returns bank code presence', function() {
          return local.hasBankCode() && !intl.hasBankCode();
        });
        it('Throws an error on missing prefix', function(done) {
          var e;
          try {
            intl.getPrefix();
          } catch (_error) {
            e = _error;
            if (e - govdata.createError.dataUnavailable() === 0) {
              done();
            } else {
              errorHelper(e);
            }
          }
        });
        it('Throws an error on missing bank code', function(done) {
          var e;
          try {
            intl.getBankCode();
          } catch (_error) {
            e = _error;
            if (e - govdata.createError.dataUnavailable() === 0) {
              done();
            } else {
              errorHelper(e);
            }
          }
        });
        return it('Acts as a string', function() {
          var i, l;
          l = local.toString();
          i = intl.toString();
          return typeof l === 'string' && l.length > 0 && typeof i === 'string' && i.length > 0;
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=govdata.js.map
