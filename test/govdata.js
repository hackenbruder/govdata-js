// Generated by CoffeeScript 1.10.0
(function() {
  var catchError, dataset, errorHelper, errorMessage, govdata;

  if (typeof process === 'object') {
    require('coffee-script/register');
    govdata = require('../src/govdata');
    dataset = require('./dataset');
  } else {
    govdata = window.GovData;
    dataset = window.dataset;
  }

  errorHelper = function(error) {
    throw new Error('Error: ' + error.getMessage());
  };

  errorMessage = function(message) {
    throw new Error('Error: ' + message);
  };

  catchError = function(callback, errorCallback, done) {
    var e, error1;
    try {
      callback();
    } catch (error1) {
      e = error1;
      if (e - errorCallback() === 0) {
        done();
      } else {
        errorHelper(e);
      }
    }
  };

  describe('GovData Integration', function() {
    describe('Queries: Generic', function() {
      describe('Not found', function() {
        it('Returns an error', function(done) {
          this.timeout(5000);
          return govdata.findEntityByNumber('123', function(entity) {
            return errorMessage('Found');
          }, function(error) {
            if (error.getCode() === 110) {
              return done();
            } else {
              return errorHelper(error);
            }
          });
        });
      });
      return describe('Found', function() {
        it('Returns an entity', function(done) {
          this.timeout(5000);
          return govdata.findEntityByNumber('00006947', function(entity) {
            return done();
          }, function(error) {
            return errorHelper(error);
          });
        });
      });
    });
  });

  describe('GovData Unit', function() {
    describe('Errors', function() {
      it('Have integer codes', function() {
        var code, errors, k, v;
        errors = govdata.createError;
        for (k in errors) {
          v = errors[k];
          code = v().getCode();
          if (typeof code !== 'integer' || code - error !== 0) {
            return false;
          }
        }
        return true;
      });
      return it('Have messages and act as strings', function() {
        var error, errors, k, message, v;
        errors = govdata.createError;
        for (k in errors) {
          v = errors[k];
          error = v();
          message = error.getMessage();
          if (typeof message !== 'string' || message !== error.toString()) {
            return false;
          }
        }
        return true;
      });
    });
    describe('Mocked: Entity', function() {
      var entity;
      entity = govdata.createEntity(dataset.entityStandard());
      it('Has s number (ICO)', function() {
        var s;
        s = entity.getNumber();
        return typeof s === 'string' && s.length > 0;
      });
      it('Has a name', function() {
        var s;
        s = entity.getName();
        return typeof s === 'string' && s.length > 0;
      });
      it('Has a valid foundation date', function() {
        var foundedAt;
        foundedAt = entity.getFoundedAt();
        return typeof foundedAt === 'object' && foundedAt.getTime() > 0;
      });
      return it('Acts as a string', function() {
        return typeof entity.toString() === 'string';
      });
    });
    describe('Mocked: VAT', function() {
      var standard;
      standard = govdata.createEntity(dataset.entityStandard());
      it('Has a valid update date', function() {
        var updatedAt;
        updatedAt = standard.getVAT().getUpdatedAt();
        return typeof updatedAt === 'object' && updatedAt.getTime() > 0;
      });
      it('Has a number (DIC)', function() {
        var s;
        s = standard.getVAT().getNumber();
        return typeof s === 'string' && s.length > 0;
      });
      it('Has accounts', function() {
        var s;
        s = standard.getVAT().getAccounts();
        return Array.isArray(s) && s.length > 0;
      });
      it('Returns accounts', function() {
        return standard.getVAT().hasAccounts();
      });
      it('Returns unreliability', function() {
        return standard.getVAT().isUnreliable() === false;
      });
      it('Acts as a string', function() {
        return typeof standard.getVAT().toString() === 'string';
      });
      describe('Registered entity', function() {
        it('Has information', function() {
          return standard.hasVAT();
        });
        it('Throws an error on missing information', function(done) {
          var entity;
          entity = govdata.createEntity(dataset.entityMissingVAT());
          if (entity.hasVAT()) {
            catchError(entity.getVAT, govdata.createError.dataUnavailable, done);
          } else {
            errorMessage('Doesn\'t have VAT information available');
          }
        });
        return it('Reports no accounts', function() {
          var entity;
          entity = govdata.createEntity(dataset.entityNoAccounts());
          return entity.hasVAT() && entity.getVAT().hasAccounts() === false;
        });
      });
      describe('Mocked: Account', function() {
        var accounts, intl, local;
        standard = govdata.createEntity(dataset.entityStandard());
        accounts = standard.getVAT().getAccounts();
        intl = accounts[0];
        local = accounts[1];
        it('Has a valid published date', function() {
          var at;
          at = local.getPublishedAt();
          return typeof at === 'object' && at.getTime() > 0;
        });
        it('Returns a number', function() {
          var s;
          s = local.getNumber();
          return typeof s === 'string' && s.length > 0;
        });
        it('Returns locality', function() {
          return local.isLocal() && !local.isIntl();
        });
        it('Returns internationality', function() {
          return !intl.isLocal() && intl.isIntl();
        });
        it('Returns prefix presence', function() {
          return local.hasPrefix() && !intl.hasPrefix();
        });
        it('Returns bank code presence', function() {
          return local.hasBankCode() && !intl.hasBankCode();
        });
        it('Throws an error on missing prefix', function(done) {
          return catchError(intl.getPrefix, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on missing bank code', function(done) {
          return catchError(intl.getBankCode, govdata.createError.dataUnavailable, done);
        });
        return it('Acts as a string', function() {
          var i, l;
          l = local.toString();
          i = intl.toString();
          return typeof l === 'string' && l.length > 0 && typeof i === 'string' && i.length > 0;
        });
      });
      describe('Mocked: Address', function() {
        var address1, address2;
        address1 = govdata.createAddress(dataset.addressStandard());
        address2 = govdata.createAddress(dataset.addressIncomplete());
        it('Acts as a string', function() {
          return typeof address1.toString() === 'string';
        });
        it('Has a formatted string', function() {
          return address1.hasFormatted();
        });
        it('Has RUIAN data', function() {
          return address1.hasRUIAN() && !address2.hasRUIAN();
        });
        it('Has geo data', function() {
          return address1.hasGeo() && !address2.hasGeo();
        });
        it('Returns geo accuracy', function() {
          return address1.isGeoAccurate() && !address2.isGeoAccurate();
        });
        it('Returns data accuracy', function() {
          return address1.isAccurate() && !address2.isAccurate();
        });
        it('Returns formatted string', function() {
          return typeof address1.toString() === 'string';
        });
        it('Returns RUIAN object', function() {
          return typeof address1.getRUIAN() === 'object';
        });
        it('Returns geo array', function() {
          return Array.isArray(address1.getGeo() && address1.getGeo().length === 2);
        });
        it('Throws an error on missing formatted string', function(done) {
          return catchError(address2.getFormatted, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on string conversion when missing data', function(done) {
          return catchError(address2.toString, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on missing RUIAN data', function(done) {
          return catchError(address2.getRUIAN, govdata.createError.dataUnavailable, done);
        });
        return it('Throws an error on missing geo data', function(done) {
          return catchError(address2.getGeo, govdata.createError.dataUnavailable, done);
        });
      });
      return describe('Mocked: RUIAN', function() {
        var ruian1, ruian2;
        ruian1 = govdata.createAddress(dataset.addressStandard()).getRUIAN();
        ruian2 = govdata.createAddress(dataset.addressBroken()).getRUIAN();
        it('Acts as a string', function() {
          return typeof ruian1.toString() === 'string';
        });
        it('Has a postal code', function() {
          return ruian1.hasPostalCode() && !ruian2.hasPostalCode();
        });
        it('Has formatted output', function() {
          return ruian1.hasFormatted() && !ruian2.hasFormatted();
        });
        it('Has a street', function() {
          return ruian1.hasStreet() && !ruian2.hasStreet();
        });
        it('Has a number', function() {
          return ruian1.hasNumber() && !ruian2.hasNumber();
        });
        it('Has a district', function() {
          return ruian1.hasDistrict() && !ruian2.hasDistrict();
        });
        it('Has a city', function() {
          return ruian1.hasCity() && !ruian2.hasCity();
        });
        it('Has an id', function() {
          return ruian1.hasId() && !ruian2.hasId();
        });
        it('Returns if city is a district', function() {
          return ruian1.isCityDistrict();
        });
        it('Returns if address is in Prague', function() {
          return ruian1.isPrague();
        });
        it('Returns a postal code', function() {
          return typeof ruian1.getPostalCode() === 'number';
        });
        it('Returns formatted', function() {
          return Array.isArray(ruian1.getFormatted() && ruian1.getFormatted().length > 0);
        });
        it('Returns a street', function() {
          return typeof ruian1.getStreet() === 'string';
        });
        it('Returns a district', function() {
          return typeof ruian1.getDistrict() === 'string';
        });
        it('Returns a city', function() {
          return typeof ruian1.getCity() === 'string';
        });
        it('Returns a number', function() {
          return typeof ruian1.getNumber() === 'string';
        });
        it('Returns a id', function() {
          return typeof ruian1.getId() === 'number';
        });
        it('Has a valid updated date', function() {
          var at;
          at = ruian1.getUpdatedAt();
          return typeof at === 'object' && at.getTime() > 0;
        });
        it('Throws an error on missing postal code', function(done) {
          return catchError(ruian2.getPostalCode, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on missing formatted', function(done) {
          return catchError(ruian2.getFormatted, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on missing street', function(done) {
          return catchError(ruian2.getStreet, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on missing district', function(done) {
          return catchError(ruian2.getDistrict, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on missing city', function(done) {
          return catchError(ruian2.getCity, govdata.createError.dataUnavailable, done);
        });
        it('Throws an error on missing number', function(done) {
          return catchError(ruian2.getNumber, govdata.createError.dataUnavailable, done);
        });
        return it('Throws an error on missing id', function(done) {
          return catchError(ruian2.getId, govdata.createError.dataUnavailable, done);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=govdata.js.map
