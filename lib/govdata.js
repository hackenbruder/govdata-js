// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function() {
  var Account, Address, Entity, Error, GovData, Helpers, RUIAN, VAT, https, url;
  if (typeof process === 'object') {
    https = require('https');
    url = require('url');
  }
  Helpers = (function() {
    function Helpers() {}

    Helpers.getDate = function(timestamp) {
      var date;
      date = new Date;
      date.setTime(timestamp);
      return date;
    };

    Helpers.createError = {
      generic: function() {
        return new Error(100, 'api request error');
      },
      throttled: function() {
        return new Error(105, 'api request was throttled');
      },
      notFound: function() {
        return new Error(110, 'requested content was not found');
      },
      invalidRequest: function() {
        return new Error(115, 'invalid request');
      },
      dataUnavailable: function() {
        return new Error(120, 'data unavailable or missing');
      }
    };

    return Helpers;

  })();
  Error = (function() {
    function Error(code, message) {
      this.toString = bind(this.toString, this);
      this.valueOf = bind(this.valueOf, this);
      this.getMessage = bind(this.getMessage, this);
      this.getCode = bind(this.getCode, this);
      this.code = code;
      this.message = message;
    }

    Error.prototype.getCode = function() {
      return this.code;
    };

    Error.prototype.getMessage = function() {
      return this.message;
    };

    Error.prototype.valueOf = function() {
      return this.getCode();
    };

    Error.prototype.toString = function() {
      return ''.concat(this.getCode(), ' - ', this.getMessage());
    };

    return Error;

  })();
  RUIAN = (function() {
    function RUIAN(data) {
      this.toString = bind(this.toString, this);
      this.hasPostalCode = bind(this.hasPostalCode, this);
      this.hasFormatted = bind(this.hasFormatted, this);
      this.hasNumber = bind(this.hasNumber, this);
      this.hasStreet = bind(this.hasStreet, this);
      this.hasDistrict = bind(this.hasDistrict, this);
      this.hasCity = bind(this.hasCity, this);
      this.hasId = bind(this.hasId, this);
      this.isCityDistrict = bind(this.isCityDistrict, this);
      this.isPrague = bind(this.isPrague, this);
      this.getPostalCode = bind(this.getPostalCode, this);
      this.getFormatted = bind(this.getFormatted, this);
      this.getStreet = bind(this.getStreet, this);
      this.getDistrict = bind(this.getDistrict, this);
      this.getCity = bind(this.getCity, this);
      this.getNumber = bind(this.getNumber, this);
      this.getId = bind(this.getId, this);
      this.getUpdatedAt = bind(this.getUpdatedAt, this);
      this.data = data.data;
      this.formatted = data.formatted;
      this.updatedAt = Helpers.getDate(data.updated_at * 1000);
    }

    RUIAN.prototype.getUpdatedAt = function() {
      return this.updatedAt;
    };

    RUIAN.prototype.getId = function() {
      if (this.hasId()) {
        return this.data.address_id;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    RUIAN.prototype.getNumber = function() {
      var prefix, ref, value;
      if (this.data.number2_character != null) {
        value = [this.data.number1, this.data.number2].join('/') + this.data.number2_character.toUpperCase();
      } else if (this.data.number2 != null) {
        value = [this.data.number1, this.data.number2].join('/');
      } else if (this.data.number1 != null) {
        value = this.data.number1;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
      prefix = ((ref = this.data.number_type) != null ? ref.length : void 0) > 4 || !this.hasStreet() && this.isCityDistrict();
      if (prefix) {
        return [this.data.number_type, value].join(' ');
      } else {
        return value;
      }
    };

    RUIAN.prototype.getCity = function() {
      if (this.hasCity()) {
        return this.data.city;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    RUIAN.prototype.getDistrict = function() {
      if (this.hasDistrict()) {
        return this.data.district;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    RUIAN.prototype.getStreet = function() {
      if (this.hasStreet()) {
        return this.data.street;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    RUIAN.prototype.getFormatted = function() {
      if (this.hasFormatted()) {
        return this.formatted;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    RUIAN.prototype.getPostalCode = function() {
      if (this.hasPostalCode()) {
        return this.data.postal_code;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    RUIAN.prototype.isPrague = function() {
      return this.data.city_area2 != null;
    };

    RUIAN.prototype.isCityDistrict = function() {
      return this.data.city === this.data.district;
    };

    RUIAN.prototype.hasId = function() {
      return this.data.address_id != null;
    };

    RUIAN.prototype.hasCity = function() {
      return this.data.city != null;
    };

    RUIAN.prototype.hasDistrict = function() {
      return this.data.district != null;
    };

    RUIAN.prototype.hasStreet = function() {
      return this.data.street != null;
    };

    RUIAN.prototype.hasNumber = function() {
      return (this.data.number1 != null) || (this.data.number2 != null) || (this.data.number2_character != null);
    };

    RUIAN.prototype.hasFormatted = function() {
      var ref;
      return ((ref = this.formatted) != null ? ref.length : void 0) > 0;
    };

    RUIAN.prototype.hasPostalCode = function() {
      return this.data.postal_code != null;
    };

    RUIAN.prototype.toString = function() {
      return this.getFormatted().join('\n');
    };

    return RUIAN;

  })();
  Address = (function() {
    function Address(data) {
      this.toString = bind(this.toString, this);
      this.hasFormatted = bind(this.hasFormatted, this);
      this.hasRUIAN = bind(this.hasRUIAN, this);
      this.hasGeo = bind(this.hasGeo, this);
      this.isGeoAccurate = bind(this.isGeoAccurate, this);
      this.isAccurate = bind(this.isAccurate, this);
      this.getFormatted = bind(this.getFormatted, this);
      this.getRUIAN = bind(this.getRUIAN, this);
      this.getGeo = bind(this.getGeo, this);
      this.data = data;
      if (this.hasRUIAN() && (this.data.ruian != null)) {
        this.ruian = new RUIAN(this.data.ruian);
      }
    }

    Address.prototype.enumProcessing = {
      OK: 300,
      MISSING_DATA: 305,
      RUIAN_PENDING: 310,
      GEOCODING_PENDING: 315
    };

    Address.prototype.enumStates = {
      UNAVAILABLE: 200,
      INACCURATE: 205,
      ACCURATE: 210
    };

    Address.prototype.getGeo = function() {
      var ref;
      if (this.hasGeo()) {
        return (ref = this.data.geo) != null ? ref.coords : void 0;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    Address.prototype.getRUIAN = function() {
      if (this.hasRUIAN()) {
        return this.ruian;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    Address.prototype.getFormatted = function() {
      var ref;
      if (this.hasFormatted()) {
        return (ref = this.data.ruian) != null ? ref.formatted : void 0;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    Address.prototype.isAccurate = function() {
      return this.data.status === this.enumProcessing.OK;
    };

    Address.prototype.isGeoAccurate = function() {
      var ref;
      return ((ref = this.data.geo) != null ? ref.status : void 0) === this.enumStates.ACCURATE;
    };

    Address.prototype.hasGeo = function() {
      var ref;
      return ((ref = this.data.geo) != null ? ref.status : void 0) !== this.enumStates.UNAVAILABLE;
    };

    Address.prototype.hasRUIAN = function() {
      var ref;
      return ((ref = this.data.ruian) != null ? ref.status : void 0) === this.enumStates.ACCURATE;
    };

    Address.prototype.hasFormatted = function() {
      return this.hasRUIAN();
    };

    Address.prototype.toString = function() {
      return this.getFormatted().join(', ');
    };

    return Address;

  })();
  Account = (function() {
    function Account(data) {
      this.toString = bind(this.toString, this);
      this.hasBankCode = bind(this.hasBankCode, this);
      this.hasPrefix = bind(this.hasPrefix, this);
      this.isIntl = bind(this.isIntl, this);
      this.isLocal = bind(this.isLocal, this);
      this.getBankCode = bind(this.getBankCode, this);
      this.getPrefix = bind(this.getPrefix, this);
      this.getNumber = bind(this.getNumber, this);
      this.getPublishedAt = bind(this.getPublishedAt, this);
      this.data = data;
      this.publishedAt = Helpers.getDate(data.published_at);
    }

    Account.prototype.getPublishedAt = function() {
      return this.publishedAt;
    };

    Account.prototype.getNumber = function() {
      return this.data.account_number;
    };

    Account.prototype.getPrefix = function() {
      if (this.hasPrefix()) {
        return this.data.prefix;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    Account.prototype.getBankCode = function() {
      if (this.isLocal()) {
        return this.data.bank_code;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    Account.prototype.isLocal = function() {
      return this.hasBankCode();
    };

    Account.prototype.isIntl = function() {
      return !this.isLocal();
    };

    Account.prototype.hasPrefix = function() {
      return this.data.prefix != null;
    };

    Account.prototype.hasBankCode = function() {
      return this.data.bank_code != null;
    };

    Account.prototype.toString = function() {
      var ref;
      if (((ref = this.data) != null ? ref.account_number : void 0) == null) {
        throw Helpers.createError.dataUnavailable();
      } else if (this.isIntl()) {
        return this.getNumber();
      } else if (this.hasPrefix()) {
        return ''.concat(this.getPrefix(), '-', this.getNumber(), '/', this.getBankCode());
      } else {
        return ''.concat(this.getNumber(), '/', this.getBankCode());
      }
    };

    return Account;

  })();
  VAT = (function() {
    function VAT(data) {
      this.toString = bind(this.toString, this);
      this.isUnreliable = bind(this.isUnreliable, this);
      this.hasAccounts = bind(this.hasAccounts, this);
      this.getAccounts = bind(this.getAccounts, this);
      this.getNumber = bind(this.getNumber, this);
      this.getUpdatedAt = bind(this.getUpdatedAt, this);
      var account, i, len, ref;
      this.data = data;
      this.updatedAt = Helpers.getDate(data.updated_at);
      this.accounts = [];
      if (Array.isArray(this.data.accounts)) {
        ref = this.data.accounts;
        for (i = 0, len = ref.length; i < len; i++) {
          account = ref[i];
          this.accounts.push(new Account(account));
        }
      }
    }

    VAT.prototype.getUpdatedAt = function() {
      return this.updatedAt;
    };

    VAT.prototype.getNumber = function() {
      return 'CZ' + this.data.dic;
    };

    VAT.prototype.getAccounts = function() {
      return this.accounts;
    };

    VAT.prototype.hasAccounts = function() {
      return this.accounts.length > 0;
    };

    VAT.prototype.isUnreliable = function() {
      return this.data.unreliable;
    };

    VAT.prototype.toString = function() {
      return this.getNumber();
    };

    return VAT;

  })();
  Entity = (function() {
    function Entity(data) {
      this.toString = bind(this.toString, this);
      this.hasVATData = bind(this.hasVATData, this);
      this.hasVAT = bind(this.hasVAT, this);
      this.hasAddressData = bind(this.hasAddressData, this);
      this.getVAT = bind(this.getVAT, this);
      this.getAddress = bind(this.getAddress, this);
      this.getFoundedAt = bind(this.getFoundedAt, this);
      this.getName = bind(this.getName, this);
      this.getNumber = bind(this.getNumber, this);
      this.data = data;
      this.foundedAt = Helpers.getDate(data.founded_at);
      if (this.hasAddressData()) {
        this.address = new Address(data.address);
      } else {
        this.address = '';
      }
      if (this.hasVAT() && this.hasVATData()) {
        this.vat = new VAT(data.vat);
      } else {
        this.vat = '';
      }
    }

    Entity.prototype.getNumber = function() {
      return this.data.number;
    };

    Entity.prototype.getName = function() {
      return this.data.name;
    };

    Entity.prototype.getFoundedAt = function() {
      return this.foundedAt;
    };

    Entity.prototype.getAddress = function() {
      if (this.hasAddressData()) {
        return this.address;
      } else {
        throw Helpers.createError.dataUnavailable();
      }
    };

    Entity.prototype.getVAT = function() {
      if (this.hasVAT()) {
        if (this.hasVATData()) {
          return this.vat;
        } else {
          throw Helpers.createError.dataUnavailable();
        }
      } else {
        throw Helpers.createError.invalidRequest();
      }
    };

    Entity.prototype.hasAddressData = function() {
      return this.data.address !== '';
    };

    Entity.prototype.hasVAT = function() {
      var ref;
      return ((ref = this.data.registers) != null ? ref.vat : void 0) === true;
    };

    Entity.prototype.hasVATData = function() {
      return this.data.vat !== '';
    };

    Entity.prototype.toString = function() {
      return this.getName();
    };

    return Entity;

  })();
  GovData = (function() {
    function GovData() {
      this.findEntityByNumber = bind(this.findEntityByNumber, this);
      this.getURL = bind(this.getURL, this);
      this.setDefaults = bind(this.setDefaults, this);
      this.setDefaults();
      if (typeof process === 'object') {
        this.get = (function(_this) {
          return function(method, resolve, reject) {
            var clientURL, options, request;
            clientURL = url.parse(_this.getURL(method));
            options = {
              hostname: clientURL.hostname,
              port: 443,
              path: clientURL.path,
              method: 'GET',
              headers: {
                'accept': 'application/json',
                'x-api-key': _this.key
              }
            };
            request = https.request(options, function(response) {
              var body;
              body = '';
              response.on('data', function(data) {
                return body += data;
              });
              return response.on('end', function() {
                var message;
                try {
                  message = JSON.parse(body);
                } catch (_error) {
                  reject(new Error());
                  return;
                }
                if (response.statusCode === 200) {
                  return resolve(message);
                } else if (response.statusCode === 429) {
                  return reject(Helpers.createError.throttled());
                } else if (message.error != null) {
                  return reject(new Error(message.error.code, message.error.message));
                }
              });
            });
            request.on('error', function() {
              return new Error(reject);
            });
            request.write(' ');
            request.end;
          };
        })(this);
      } else {
        this.get = (function(_this) {
          return function(method, resolve, reject) {
            $.ajax({
              url: _this.getURL(method),
              method: 'GET',
              dataType: 'json',
              headers: {
                'x-api-key': _this.key
              }
            }).always(function(message, status, xhr) {
              var error, ref;
              if (xhr.status === 200) {
                return resolve(message);
              } else if (xhr === '' && status === 'error') {
                return reject(Helpers.createError.throttled());
              } else if (((ref = message.responseJSON) != null ? ref.error : void 0) != null) {
                error = message.responseJSON.error;
                return reject(new Error(error.code, error.message));
              } else {
                return reject(Helpers.createError.generic());
              }
            });
          };
        })(this);
      }
    }

    GovData.prototype.init = function(options) {
      return this.stage = options.stage, this.key = options.key, options;
    };

    GovData.prototype.setDefaults = function() {
      this.url = 'https://api.govdata.cz/v1/';
      return this.init({
        stage: 'demo',
        key: 'ZX1Ap4RUDY2VisBOu2P0e4sEvh2LhWh4Cx8lqoO6'
      });
    };

    GovData.prototype.getURL = function(method) {
      return ''.concat(this.url, this.stage, '/', method);
    };

    GovData.prototype.findEntityByNumber = function(number, resolve, reject) {
      return this.get('entity/' + number, (function(_this) {
        return function(data) {
          return resolve(_this.createEntity(data));
        };
      })(this), reject);
    };

    GovData.prototype.createEntity = function(data) {
      return new Entity(data);
    };

    GovData.prototype.createAddress = function(data) {
      return new Address(data);
    };

    GovData.prototype.createError = Helpers.createError;

    return GovData;

  })();
  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    return module.exports = new GovData();
  } else if (typeof define === 'function' && (define.amd != null)) {
    return define(function() {
      return new GovData();
    });
  } else {
    return window.GovData = new GovData();
  }
})();
